//E:/139/gasproject_LPC1768_V1.7/src/common/CFlashParam.c
//2014/04/29 08:53:25
/*****************************************************************************
*author:
*time  :
*****************************************************************************/
void SetHistFlag(uint8 tmp);
uint8 GetHistFlag(void);
//whether is firealarm
uint8 gethistory_isfirealarm(uint32 row);
//whether is battory low
uint8 gethistory_isbatlow(uint32 row);
//whether history is fault
uint8 gethistory_isfault(uint32 row);
void AddPageConter(void);
void SetPageConter(uint8 tmp);
uint8 GetPageConter(void);
void AddHistConter(void);
uint16 GetHistConter(void);
void SetHistConter(uint16 tmp);
//设置历史记录满标志
void setHistFullFlag(uint8 flag);
uint8 getHistFullFlag(void);
//获取历史记录是否为满
uint8 getHistFull(void);
static void init_record(Flash_Record * flash_record);
static void save_record(Flash_Record * flash_record);
static void clr_record(Flash_Record * flash_record);
//设置存储缓存
static void set_array(Flash_Record * flash_record,uint32 row,uint32 col,uint8 tmp);
//获取存储缓存
static uint8 get_array(Flash_Record * flash_record,uint32 row,uint32 col);
void init_basic_info(void);
void set_basic_info(uint32 row,uint8 tmp);
uint8 get_basic_info(uint32 row);
//基本信息具有较高的优先级，需要直接存储
void save_basic_info(void);
//设置部件总数
void set_basic_nums(uint8 compnums);
//add
void add_basic_nums(void);
//sub
void sub_basic_nums(void);
void set_basic_localaddr(uint8 localaddr);
void set_basic_zones(uint8 departallnums);
uint32 get_basic_localaddr(void);
uint32 get_basic_zones(void);
uint32 get_basic_nums(void);
void init_comp_info(void);
void save_comp_info(void);
//设置部件缓存变量
static void set_comp_info(uint32 row,uint32 col,uint8 tmp);
//获取部件缓存变量
static uint8 get_comp_info(uint32 row,uint32 col);
//设置器件的 防区
void set_comp_inzone(uint8 item,uint8 inzone);
//设置器件的 部件
void set_comp_partnumber(uint8 item,uint8 partnumber);
void set_comp_ciraddr(uint8 item,uint8 ciraddr);
void set_comp_psn0(uint8 item,uint8 psn0);
void set_comp_psn1(uint8 item,uint8 psn1);
void set_comp_psn2(uint8 item,uint8 psn2);
void set_comp_psn3(uint8 item,uint8 psn3);
void set_comp_devtype(uint8 item,uint8 devtype);
//设置器件信息
void set_comp_all(uint8 item,compent *compinfo);
//重置所有信息
void clr_comp_all(uint8 item);
//清回路信息
void clr_comp_loop_all(void);
//设置器件信息并保存
void set_comp_all_and_save(uint8 item,compent *compinfo);
//获取
uint8 get_comp_inzone(uint8 item);
uint8 get_comp_partnumber(uint8 item);
uint8 get_comp_ciraddr(uint8 item);
//判断是否有同回路的部件
uint8 judge_same_ciraddr(uint8 row,uint8 ciraddr);
uint8 get_comp_psn0(uint8 item);
uint8 get_comp_psn1(uint8 item);
uint8 get_comp_psn2(uint8 item);
uint8 get_comp_psn3(uint8 item);
uint8 get_comp_devtype(uint8 item);
//获取器件所有信息
void get_comp_all(uint8 item, compent *compinfo);
void init_mask_info(void)/*MaskPSNInit*/;
void save_mask_info(void)/*SaveMaskPSN*/;
void set_mask_info(uint32 row,uint8 tmp);
uint8 get_mask_info(uint32 row)/*CGetMaskPSN*/;
//初始化报警信息
void init_alarm_info(void);
//保存报警信息
void save_alarm_info(void)/**/;
static void set_alarm_info(uint32 row,uint32 col, uint8 tmp);
static uint8 get_alarm_info(uint32 row,uint32 col)/**/;
//获取报警属性
uint8 get_alarm_attr(uint32 row);
uint8 get_alarm_alarmed(uint32 row);
//是否有火警
uint8 judge_alarm_firealarmed(uint32 row);
//是否有故障
uint8 judge_alarm_faultalarmed(uint32 row);
uint8 get_alarm_firstalarm(uint32 row);
//获取报警信息属性列表 list--------------------------
void set_alarm_inzone(uint32 item, uint8 tmp);
void set_alarm_part(uint32 item, uint8 tmp);
void set_alarm_ciraddr(uint32 item, uint8 tmp);
void set_alarm_alarmsum(uint32 item, uint8 tmp);
void set_alarm_type(uint32 item, uint8 tmp);
void set_alarm_alarmed(uint32 item, uint8 tmp);
void set_alarm_firstalarm(uint32 item, uint8 tmp);
//获取报警属性
void set_alarm_attr(uint32 row, uint8 tmp);
void set_alarm_f_recvmess3h(uint32 item,uint8 flag);
void clr_alarm_f_recvmess3h(uint32 item);
void set_alarm_allinfo(uint32 item,alarminfo *info);
//清除报警信息
void clr_alarm_allinfo(void);
void set_alarm_allinfo_andsave(uint32 item,alarminfo *info);
uint8 get_alarm_part(uint32 item);
uint8 get_alarm_ciraddr(uint32 item);
uint8 get_alarm_type(uint32 item);
//3hour recved message flag?
uint8 get_alarm_f_recvmess3h(uint32 item);
void get_alarm_allinfo(uint32 item, alarminfo *info);
//设置首警
void set_alarm_first(alarminfo *info);
//获取首警
void get_alarm_first(alarminfo *info);
//首警标志
uint8 get_alarm_firstflag(void);
//首警部件号
uint8 get_alarm_first_part(void);
//火警个数
uint8 get_firealarm_nums(void);
void clr_firealarm(void);
//通过部件号查找位置
uint8 get_alarm_item_bypart(uint8 part);
//故障个数
uint8 get_faultalarm_nums(void);
//是否为首警
uint8 judge_alarm_first(void);
void init_node_info(void)/*Com0Data_Init*/;
void save_node_info(void);
//设置部件缓存变量
void set_node_info(uint32 row,uint32 col,uint8 tmp);
void set_node_frame1(uint32 row,uint8 tmp);
void set_node_frame2(uint32 row,uint8 tmp);
void set_node_frame3(uint32 row,uint8 tmp);
void set_node_cmd1(uint32 row,uint8 tmp);
void set_node_cmd_rw(uint32 row,uint8 tmp);
void set_node_devtype(uint32 row,uint8 tmp);
void set_node_targetaddr(uint32 row,uint8 tmp);
void set_node_controllernum(uint32 row,uint8 tmp);
void set_node_datalen(uint32 row,uint8 tmp);
void set_node_loop(uint32 row,uint8 tmp);
void set_node_addr(uint32 row,uint8 tmp);
void set_node_hz(uint32 row,uint8* tmp);
void set_node_cs(uint32 row,uint8* tmp);
void set_node_all_info(uint32 row,note_info_t *info);
//获取部件缓存变量
uint8 get_node_info(uint32 row,uint32 col);
//}
int8 get_node_row(/*uint8 dep,*/uint8 comp);
void save_node_and_nodenums(void)/*CSaveAnn*/;
//初始化注释条数
void init_nodenums_info(void)/*AnnCounterInit*/;
//保存注释条数到flash
void save_nodenums_info(void);
void set_nodenums(uint8 tmp);
uint8 get_nodenums(void);
void add_nodenums(void);
void init_hist_info(void)/*GetHistory*/;
void save_hist_info(void)/*SendHistToFlash*/;
//获取历史记录信息
static uint8 get_hist_info(uint32 row,uint8 col)/*GetHistoryList*/;
void set_hist_info(uint32 row,uint8 col,uint8 tmp)/*SetHistoryList*/;
void clr_hist_info(void) /*ClrHistoryList*/;
uint8 get_hist_order(uint32 row)/*gethistory_num*/;
uint8 get_hist_inzone(uint32 row)/*gethistory_num*/;
uint8 get_hist_part(uint32 row)/*gethistory_num*/;
uint8 get_hist_circleaddr(uint32 row)/*gethistory_num*/;
uint8 get_hist_vAnnRow(uint32 row)/*gethistory_num*/;
uint8 get_hist_attr(uint32 row)/*gethistory_num*/;
uint8 get_hist_opstype(uint32 row)/*gethistory_num*/;
uint8 get_hist_devtype(uint32 row)/*gethistory_devtype*/;
uint8 get_hist_lastnum(uint32 row)/*gethistory_num*/;
//获取历史记录时间
void get_hist_datetime(uint32 row,PCF8563_DATE* dateyear)/*gethistory_num*/;
//获取历史记录的所有信息
void get_hist_allinfo(uint32 row, history_st* info);
//设置历史记录所有信息
void set_hist_allinfo(uint32 row, history_st* info);
//保存历史记录和历史条数
void save_hist_all(void);
//历史记录是否为满，置位标志get_histnum_info(2)
uint8 judge_histnums_full(void);
//设置历史记录为满
void set_histnum_full(void);
//初始化历史条数
void init_histnums_info(void)/*InitHistInfo*/;
void save_histnums_info(void)/*flash_save_historycounter*/;
//设置缓存
static void set_histnum_info(uint32 row,uint8 tmp);
//获取缓存
static uint8 get_histnum_info(uint32 row);
//初始化历史记录和历史条数
void init_hist_and_histnums(void);
void init_histsufix_info(void);
//初始化所有存储
void init_flash_all(void);
//}
uint8 CheckDepComp(uint8 dep,uint8 comp);
//}
int16 GetNum(uint8 psn0,uint8 psn1,uint8 psn2,uint8 psn3);
void CAddCirCounter(void);
void CSetCirCounter(uint8 tmp);
uint8 CGetCirCounter(void);
int8 GetRow(uint8 t1,uint8 t2);
/////判断是否有报火警，有 0，无 1/////是否之前有火警
uint8 JudgeAlarmType(void);
uint8 JudgeCompAlarmType(uint8 row);
void SetDatatoFlash(uint8 row,uint8 col,uint8 tmp);
uint8 GetDatatoFlash(uint8 row,uint8 col);
//}
uint8 GetDatatoFlashType(uint8 row);
uint8 GetDatatoFlashAlarmType(uint8 row);
void SetFlashData(uint8 id,uint8 tmp);
void SetDepCompSum(uint16 temp,uint8 tmp);
uint8 GetDepCompSum(uint16 tmp);
//}
uint8 ReadFlashPsn(uint8 row,uint8 col);
void SetCom0Ann(uint8 row,uint8 cow,uint8 tmp);
